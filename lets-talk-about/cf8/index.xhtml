<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width" />
        <title>CF-8: The 8-bit Control Freak Format</title>
        <link rel="stylesheet" href="../../styles-common.css" />
        <link rel="stylesheet" href="../../styles-small.css" />
        <link rel="stylesheet" href="../../styles-medium.css" />
        <link rel="stylesheet" href="../../styles-large.css" />
    </head>
    <body>
        <h1>CF-8: The 8-bit Control Freak Format</h1>
        <h2>Overview</h2>
        <p>The idea here is to allow all Unicode scalar values to be encoded such that both <strong>C0</strong> and <strong>C1</strong> control codes are transparent. It is therefore somewhat compliant with ISO-2022. Only code points within the Basic Multilingual Plane (BMP) can be encoded with CF-8. As such, the BMP’s surrogate pair system must be used to encode supplementary characters.</p>
        <h2>Encoding Steps</h2>
        <p>All BMP scalar values are encoded using anywhere from one to three bytes by splitting the value into that many bit fields and then adding the appropriate bias for each byte, if applicable. The <code>0bXXXXXXXX</code>, <code>0bXXXX</code>, and <code>0bXXXXXX</code> placeholders below represent 8-, 4-, and 16-bit values, respectively. Bias offsets (for two- and three-byte values) are fixed and shown as hexadecimal constants.</p>
        <table class="medium">
            <tr>
                <th>Low</th>
                <th>High</th>
                <th>Byte 1</th>
                <th>Byte 2</th>
                <th>Byte 3</th>
            </tr>
            <tr>
                <td>U+0000</td>
                <td>U+009F</td>
                <td><code>0bXXXXXXXX</code></td>
                <td></td>
                <td></td>
            </tr>
            <tr>
                <td>U+00A0</td>
                <td>U+03FF</td>
                <td><code>0xE0 + 0bXXXX</code></td>
                <td><code>0xA0 + 0bXXXXXX</code></td>
                <td></td>
            </tr>
            <tr>
                <td>U+0400</td>
                <td>U+FFFF</td>
                <td><code>0xF0 + 0bXXXX</code></td>
                <td><code>0xA0 + 0bXXXXXX</code></td>
                <td><code>0xA0 + 0bXXXXXX</code></td>
            </tr>
        </table>
        <h2>Encoding Example</h2>
        <p>In the case of encoding the Chinese character 永 (eternity), this character has a scalar value of <code>U+6C38</code>. Referencing the table above, this value will need three bytes to encode. Accordingly, the value is mapped out into three separate fields that are 4-bit, 6-bit, and 6-bit, giving us a total of 16 bits:</p>
        <p><code>0b0110 0b110000 0b111000</code></p>
        <p>The three final byte values are calculated like so, with the hexadecimal values being constant in all three-byte cases:</p>
        <p><code>byte_1 = 0xF0 + 0b0110</code><br /><code>byte_2 = 0xA0 + 0b110000</code><br /><code>byte_3 = 0xA0 + 0b111000</code></p>
        <h2>Decoding</h2>
        <p>The decoding steps are performed in reverse.</p>
        <p>Decoders should reject any decoded overlong values. That is, each scalar value should be encoded using as few bytes as possible. Any decoded Unicode value that doesn’t follow this rule should be rejected.</p>
        <h2>Byte Order Mark</h2>
        <p>CF-8’s byte order mark is: <code>0xFF 0xDB 0xDF</code>.</p>
        <h2>Comparison</h2>
        <p>The below table compares how many bytes CF-8 requires for different scalar values compared to other encodings.</p>
        <table class="medium">
            <tr>
                <th>Low</th>
                <th>High</th>
                <th>CF-8</th>
                <th>UTF-8</th>
                <th>UTF-16</th>
                <th>UTF-32</th>
            </tr>
            <tr>
                <td>U+0000</td>
                <td>U+007F</td>
                <td>1</td>
                <td>1</td>
                <td>2</td>
                <td>4</td>
            </tr>
            <tr>
                <td>U+0080</td>
                <td>U+009F</td>
                <td>1</td>
                <td>2</td>
                <td>2</td>
                <td>4</td>
            </tr>
            <tr>
                <td>U+00A0</td>
                <td>U+03FF</td>
                <td>2</td>
                <td>2</td>
                <td>2</td>
                <td>4</td>
            </tr>
            <tr>
                <td>U+0400</td>
                <td>U+07FF</td>
                <td>3</td>
                <td>2</td>
                <td>2</td>
                <td>4</td>
            </tr>
            <tr>
                <td>U+0800</td>
                <td>U+FFFF</td>
                <td>3</td>
                <td>3</td>
                <td>2</td>
                <td>4</td>
            </tr>
            <tr>
                <td>U+010000</td>
                <td>U+10FFFF</td>
                <td>6</td>
                <td>4</td>
                <td>4</td>
                <td>4</td>
            </tr>
        </table>
        <h3>Versus UTF-8</h3>
        <p>CF-8 has the following similarities to UTF-8:</p>
        <ul>
            <li>ASCII compatibility</li>
            <li>Self-synchronization</li>
        </ul>
        <p>And it has the following differences:</p>
        <ul>
            <li>Surrogate pairs are needed to encode supplementary values.</li>
            <li>The <code>0xFE</code> and <code>0xFF</code> bytes may appear in encoded streams.</li>
        </ul>
        <h3>Versus ISO-2022</h3>
        <p>CF-8 follows ISO-2022 in the following ways:</p>
        <ul>
            <li><strong>C0</strong> and <strong>C1</strong> control codes are preserved.</li>
            <li>Every multibyte character has the most significant bit set.</li>
        </ul>
        <p>And it deviates in the following ways:</p>
        <ul>
            <li>Unicode scalar values within the BMP can take anywhere from one to three bytes.</li>
        </ul>
        <footer>
            <p>
                Created by William Swartzendruber<br />
                This work is placed into the <a href="https://creativecommons.org/publicdomain/zero/1.0/" target="_blank">public domain</a>.
            </p>
            <a href="https://creativecommons.org/publicdomain/zero/1.0/" target="_blank"><img src="../../cc0.webp" alt="CC0" /></a>
        </footer>
    </body>
</html>
